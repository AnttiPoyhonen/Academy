package rest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

// import the @Entity and the Repository
import rest.Country;
import rest.CountryRepository;
import rest.City;
import rest.CityRepository;

import java.awt.print.Pageable;
import java.util.ArrayList;
import java.util.List;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/countries") // This means URL's start with /countries (after Application path)
public class CountryController {

    @Autowired  // to get the bean called countryRepository, auto-generated by Spring, to handle the data
    private CountryRepository countryRepository;

    @Autowired  // to get the bean called cityRepository, auto-generated by Spring, to handle the data
    private CityRepository cityRepository;


    // Get to display all Countries in a view
    @GetMapping  // => "/countries" from the controller URL
    public String getCountries(Model model) {

        model.addAttribute("countrylist", countryRepository.findAll());

        // return the Thymeleaf view "countries.html"
        return "countries";
    }

    // Get to display all Countries in a view of a page
    @RequestMapping(path="/pages")  // => "/countries/pages" from the controller URL
    public String getPageableCountries(
    //        Pageable pageable,  // could be Pageable to autocollect the Pageable parameters (page, size, etc)
            @RequestParam(value="page", defaultValue="1") Integer page,  // Page objects index starts at 0
            @RequestParam(value="size", defaultValue="10") Integer pageSize,
            Model model) {

        // query the page from the respository with a new Pageable (PageRequest)
        // search for the page given -1 as indexing starts at 0 instead of the real life page number
        Page<Country> p = countryRepository.findAll(new PageRequest(page - 1, pageSize));

        // find the current page and plus-minus 5 pages for the pagination links / indexes
        int current = p.getNumber() + 1;
        int begin = Math.max(0, current - 5) + 1;
        int end = Math.min(current + 5, p.getTotalPages()) + 1;

        // add the page numbers and the page itself to the model
        model.addAttribute("beginIndex", begin);
        model.addAttribute("endIndex", end);
        model.addAttribute("currentIndex", current);

        // able to attach the Page, the List or both
        model.addAttribute("countrypage", p);  // Page object
        model.addAttribute("countrylist", p.getContent());  // List-object from the Page .getContent()

        return "countriespaged";
    }

    // Request to find the top 10 countries by population ordered by population
    @RequestMapping(path="/maxpopulation")
    public String getCountriesMaxPopulation(
            @RequestParam(value="size", defaultValue = "10" ) Integer size,
            Model model) {

        List<Country> list = countryRepository.findCountriesWithMaxPopulations(new PageRequest(0, size)).getContent();
        model.addAttribute("countrylist", list);
        return "countries2";

    }

    // Get to display Countries with the string contained in Code or Name
    @GetMapping(path="/contains")
    public String getCountriesContaining(@RequestParam String s, Model model) {

        // query of Countries with the search String in Code or Name
        model.addAttribute("countrylist", countryRepository.findCountriesByCodeContainingOrNameContainingOrderByName(s, s));

        // return the Thymeleaf view "countries.html"
        return "countries2";
    }

    // to update a Country
    @RequestMapping(path="/update") // Map ONLY GET Requests, "RequestMapping" would map all requests
    public String updateCountry (
                        @RequestParam(value="Code", defaultValue="") String Code,
                        @RequestParam String Name,
                        @RequestParam String Population,
                        @RequestParam String HeadOfState,  // @RequestParam means it is a parameter from the GET or POST request
                        Model model) {

        // if no Code entered, return normal view
        if ("".equals(Code)) return "countries2";

        // create a Country object by finding the right one by Code
        Country c = countryRepository.findCountryByCode(Code);

        // if no Country found, return normal view
        if (c == null) return "countries2";

        c.setName(Name);
        c.setPopulation(new Integer(Population));
        c.setHeadofstate(HeadOfState);

        // save the updated Country to Repository (and database!)
        countryRepository.save(c);

        List<Country> l = new ArrayList<>();
        l.add(c);

        model.addAttribute("countrylist", l);

        // return the Thymeleaf view "countries.html"
        return "countries2";
    }
}