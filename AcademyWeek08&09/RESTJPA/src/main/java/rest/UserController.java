package rest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

// import the @Entity and the Repository
import rest.User;
import rest.UserRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /user (after Application path)
public class UserController {

    @Autowired  // to get the bean called userRepository, auto-generated by Spring, to handle the data
    private UserRepository userRepository;

    // to add a User
    @RequestMapping(path="/add") // Map ONLY GET Requests, "RequestMapping" would map all requests
    public @ResponseBody String addNewUser (  // @ResponseBody means the returned String is the response, not a view name
            @RequestParam String name,
            @RequestParam String email) {  // @RequestParam means it is a parameter from the GET or POST request
        // '@RequestParam(value="x", defaultValue="x") String x' could be used to import a param efficiently

        // create a new User object
        User u = new User();
        u.setName(name);
        u.setEmail(email);

        // add the new User to Repository (and database!)
        userRepository.save(u);

        // return the String "Saved", because of @ResponseBody
        return "Saved";
    }

    // to update a User
    @RequestMapping(path="/update") // Map ONLY GET Requests, "RequestMapping" would map all requests
    public @ResponseBody String updateUser (  // @ResponseBody means the returned String is the response, not a view name
                                              @RequestParam int id,
                                              @RequestParam String name,
                                              @RequestParam String email) {  // @RequestParam means it is a parameter from the GET or POST request
        // '@RequestParam(value="x", defaultValue="x") String x' could be used to import a param efficiently

        // create a User object by finding the right one by id
        User u = userRepository.findUserById(id);
        u.setName(name);
        u.setEmail(email);

        // save the updated User to Repository (and database!)
        userRepository.save(u);

        // return the String "Saved", because of @ResponseBody
        return "Saved";
    }

    // to delete a User
    @RequestMapping(path="/delete")
    public @ResponseBody String deleteUser (@RequestParam int id) {

        // Delete as transactional
        if(userRepository.deleteById(id) == 1) return "Deleted";
        else return "Failed";

        /* using a EM, DOESNT WORK, UNFINISHED
        // create a User object by finding the right one by id
        User u = userRepository.findUserById(id);

        userRepository.getTransaction().begin();
        userRepository.remove(employee);
        userRepository.getTransaction().commit();
        */
    }

    // Get to display all Users
    @GetMapping(path="/all")  // => /user/all
    public @ResponseBody Iterable<User> getAllUsers() {

        // query of "SELECT * FROM User" to the db
        // return a JSON or XML with the users
        return userRepository.findAll();
    }

    // Get to display Users with the keyword contained in name or email
    @GetMapping(path="/contains")
    public @ResponseBody Iterable<User> getUserContains(@RequestParam String s) {

        // query of Users with the search String in name or email
        return userRepository.findUsersByNameContainingOrEmailContainingOrderById(s, s);
    }
}